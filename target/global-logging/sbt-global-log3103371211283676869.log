[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""/tmp/idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""/tmp/idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.2 (Ubuntu Java 11.0.9)
[debug]       Load.loadUnit: plugins took 146.916837ms
[debug]       Load.loadUnit: defsScala took 0.372189ms
[debug] [Loading] Scanning directory /home/delcin/.sbt/1.0/plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/delcin/.sbt/1.0/plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 30.741992 ms
[debug]           Load.resolveProject(global-plugins) took 53.477993ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: /home/delcin/.sbt/1.0/plugins, plugins: List(<none>))) took 121.065026ms
[debug] [Loading] Done in /home/delcin/.sbt/1.0/plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 148.533905ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.290447ms
[debug]     Load.loadUnit(file:/home/delcin/.sbt/1.0/plugins/, ...) took 307.263347ms
[debug]   Load.apply: load took 566.079773ms
[debug]   Load.apply: resolveProjects took 10.211489ms
[debug]   Load.apply: finalTransforms took 87.909888ms
[debug]   Load.apply: config.delegates took 7.457841ms
[debug]   Load.apply: Def.make(settings)... took 416.949241ms
[debug]   Load.apply: structureIndex took 113.193421ms
[debug]   Load.apply: mkStreams took 1.902709ms
[info] loading global plugins from /home/delcin/.sbt/1.0/plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4434.033907ms
[debug]           Load.loadUnit: plugins took 17.037889ms
[debug]           Load.loadUnit: defsScala took 0.002276ms
[debug] [Loading] Scanning directory /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project
[debug]             Load.loadUnit: mkEval took 6.087034ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.42489 ms
[info] loading settings for project advanced_fp_scala-build from idea.sbt ...
[debug]               Load.resolveProject(advanced_fp_scala-build) took 2.732182ms
[debug]             Load.loadTransitive: finalizeProject(Project(id advanced_fp_scala-build, base: /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project, plugins: List(<none>))) took 4.673187ms
[debug] [Loading] Done in /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project, returning: (advanced_fp_scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2397.495255ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.429458ms
[debug]         Load.loadUnit(file:/home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project/, ...) took 2418.593776ms
[debug]       Load.apply: load took 2419.714925ms
[debug]       Load.apply: resolveProjects took 0.087338ms
[debug]       Load.apply: finalTransforms took 9.23059ms
[debug]       Load.apply: config.delegates took 0.354496ms
[debug]       Load.apply: Def.make(settings)... took 103.231994ms
[debug]       Load.apply: structureIndex took 37.176687ms
[debug]       Load.apply: mkStreams took 0.003392ms
[info] loading project definition from /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 6302.185954ms
[debug]     Load.loadUnit: defsScala took 0.00409ms
[debug] [Loading] Scanning directory /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala
[debug]       Load.loadUnit: mkEval took 0.220283ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.825456 ms
[info] loading settings for project advanced_fp_scala from build.sbt ...
[debug]         Load.resolveProject(advanced_fp_scala) took 27.008995ms
[debug]       Load.loadTransitive: finalizeProject(Project(id advanced_fp_scala, base: /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala, plugins: List(<none>))) took 30.074868ms
[debug] [Loading] Done in /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala, returning: (advanced_fp_scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 666.08784ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.462941ms
[debug]   Load.loadUnit(file:/home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/, ...) took 6971.432581ms
[debug] Load.apply: load took 6972.720454ms
[debug] Load.apply: resolveProjects took 0.083899ms
[debug] Load.apply: finalTransforms took 21.724264ms
[debug] Load.apply: config.delegates took 0.313531ms
[debug] Load.apply: Def.make(settings)... took 75.054111ms
[debug] Load.apply: structureIndex took 30.843716ms
[debug] Load.apply: mkStreams took 0.002825ms
[info] set current project to advanced_fp_scala (in build file:/home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 39001 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 39001, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to advanced_fp_scala (in build file:/home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/)
[debug] > Exec(idea-shell, None, None)
