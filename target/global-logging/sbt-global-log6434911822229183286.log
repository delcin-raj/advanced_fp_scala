[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""/tmp/idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""/tmp/idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.2 (Ubuntu Java 11.0.9)
[debug]       Load.loadUnit: plugins took 143.897154ms
[debug]       Load.loadUnit: defsScala took 0.367869ms
[debug] [Loading] Scanning directory /home/delcin/.sbt/1.0/plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/delcin/.sbt/1.0/plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 25.844546 ms
[debug]           Load.resolveProject(global-plugins) took 56.454214ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: /home/delcin/.sbt/1.0/plugins, plugins: List(<none>))) took 116.48587ms
[debug] [Loading] Done in /home/delcin/.sbt/1.0/plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 141.327967ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.311126ms
[debug]     Load.loadUnit(file:/home/delcin/.sbt/1.0/plugins/, ...) took 296.019069ms
[debug]   Load.apply: load took 537.782563ms
[debug]   Load.apply: resolveProjects took 7.531721ms
[debug]   Load.apply: finalTransforms took 71.152433ms
[debug]   Load.apply: config.delegates took 8.00916ms
[debug]   Load.apply: Def.make(settings)... took 481.237269ms
[debug]   Load.apply: structureIndex took 121.384892ms
[debug]   Load.apply: mkStreams took 2.193575ms
[info] loading global plugins from /home/delcin/.sbt/1.0/plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2963.833601ms
[debug]           Load.loadUnit: plugins took 20.577267ms
[debug]           Load.loadUnit: defsScala took 0.005089ms
[debug] [Loading] Scanning directory /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project
[debug]             Load.loadUnit: mkEval took 6.065578ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.455668 ms
[info] loading settings for project advanced_fp_scala-build from idea.sbt ...
[debug]               Load.resolveProject(advanced_fp_scala-build) took 3.411251ms
[debug]             Load.loadTransitive: finalizeProject(Project(id advanced_fp_scala-build, base: /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project, plugins: List(<none>))) took 6.514658ms
[debug] [Loading] Done in /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project, returning: (advanced_fp_scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 119.707678ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.292609ms
[debug]         Load.loadUnit(file:/home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project/, ...) took 144.410373ms
[debug]       Load.apply: load took 145.837904ms
[debug]       Load.apply: resolveProjects took 0.098788ms
[debug]       Load.apply: finalTransforms took 16.68929ms
[debug]       Load.apply: config.delegates took 0.788705ms
[debug]       Load.apply: Def.make(settings)... took 100.028891ms
[debug]       Load.apply: structureIndex took 34.462065ms
[debug]       Load.apply: mkStreams took 0.003687ms
[info] loading project definition from /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 600.38974ms
[debug]     Load.loadUnit: defsScala took 0.002853ms
[debug] [Loading] Scanning directory /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala
[debug]       Load.loadUnit: mkEval took 0.164595ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.523131 ms
[info] loading settings for project advanced_fp_scala from build.sbt ...
[debug]         Load.resolveProject(advanced_fp_scala) took 24.272393ms
[debug]       Load.loadTransitive: finalizeProject(Project(id advanced_fp_scala, base: /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala, plugins: List(<none>))) took 27.928342ms
[debug] [Loading] Done in /home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala, returning: (advanced_fp_scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 45.992198ms
[debug]     Load.loadUnit: cleanEvalClasses took 1.178557ms
[debug]   Load.loadUnit(file:/home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/, ...) took 648.08403ms
[debug] Load.apply: load took 649.233124ms
[debug] Load.apply: resolveProjects took 0.080209ms
[debug] Load.apply: finalTransforms took 22.55397ms
[debug] Load.apply: config.delegates took 0.407357ms
[debug] Load.apply: Def.make(settings)... took 87.684299ms
[debug] Load.apply: structureIndex took 37.215851ms
[debug] Load.apply: mkStreams took 0.003216ms
[info] set current project to advanced_fp_scala (in build file:/home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 32865 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 32865, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to advanced_fp_scala (in build file:/home/delcin/codes/scala/coursera/funProgDesign/advanced_fp_scala/)
[debug] > Exec(idea-shell, None, None)
